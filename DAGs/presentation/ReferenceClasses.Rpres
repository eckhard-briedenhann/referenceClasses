ReferenceClasses
========================================================
author: Rob Bennetto and Eckhard Briedenhann
date: 2019-04-06
autosize: true

Introduction
========================================================

Chalcid


SatRday
========================================================
incremental: true

- What to wear?
  - Normal clothes?
  - Formal clothes?
  - Zebra suit?

- Fit in with other responsibilities 
 - Will there be enough time?
 - How long will it take?

========================================================
type: prompt
transition-speed: slow
```{r, echo=FALSE, fig.align="center", out.width = "60%"}
   knitr::include_graphics('./stressed.jpg')
```

How do we over engineer this?
========================================================
incremental: true

What do we need?


TODO: Need a graph for this

StateA  --->     StateB  --->     StateC


Process:
* Assign weights to the transitions
* And calculate what the boundries of the states as a whole are


Rob's face
========================================================

```{r, echo=FALSE, fig.align="center", out.width= "100%"}
   knitr::include_graphics('./calc.gif')
```

Directed Acyclic Graphs (aka DAGs)
========================================================

* Nodes (Vertices)
* Directed Edges ( pairs of nodes)
* No Cycles


```{r, echo=FALSE, fig.align="center", out.width= "40%"}
   knitr::include_graphics('./wikiDAG.png')
```

Representation problem
========================================================
incremental: true

Object Orientated Programming:
```{ width = "50%"}
// Vector object
class Node {
  public:
    Node(int id):id(id){}
    int id;
};

class DAG {
  public:
  
  DAG(int size) : adjList(size){}
  
  void addEdge(Node* from, Node* to){
    adjList[from->id].push_back(to);
  }
  std::vector<*Node> adjList; 
};

// Init nodes
Node n1(1); 
Node n2(2); 
Node n3(3); 

// 1 --> 2 --> 3
graph.AddEdge(&n1, &n2);
graph.AddEdge(&n2, &n3);
```
***

R:
```
// Helper function

getID <- function(node){
  paste0("v",node$id)
}

# Create Nodes

n1 <- list(id = 1)
n2 <- list(id = 2)
n3 <- list(id = 3)

# 1 --> 2 --> 3
graph[[getID(n1)]] <- list(n2)
graph[[paste0(n2)]] <- list(n2)
```


========================================================

```{r, echo=FALSE, fig.align="center", out.width= "100%"}
   knitr::include_graphics('./smellyCheeseCat.gif')
```

Why does this smell funny?
========================================================

* **No typing** - live in the wild west
* **No abstraction** - very verbose 


Object Orientated Programming in R
========================================================
incremental: true

S3 Classes:
``` {r}
n1 <- list(id = 1)

class(n1) <- "node"

print.node <- function(obj){
  
  cat("Class:",class(obj),
      "\nID:",obj$id)
}
print(n1)
```
***

S4 Classes:
``` {r}
node <- setClass("node", slots=list(id="numeric"))

n1 <- node(id = 1)

print.node <- function(obj){
  
  cat("Class:",class(obj),
      "\nID:",obj@id)
}
print(n1)
```

Reference Classes
========================================================

``` {r}
node <- setRefClass("nodeR", fields = list(id = "numeric"), 
                     methods = list(
                       show = function(){
                          cat("Node\nID:",id,"\n")
                       }
                     ))
n1 <- node(id = 1)

print(n1)

```


Benefits:

* Unlike S3 and S4 methods belong to class
* Able to have pointer like functionality
* Powerful abstraction layer



========================================================

```{r, echo=FALSE, fig.align="center", out.width= "100%"}
   knitr::include_graphics('./attention.jpg')
```


Let's get this party starting?
========================================================


State:
```{r}

state <- setRefClass("vertex", fields = list(id = "numeric", description = "character"), 
                     methods = list(
                       show = function(){
                          cat("State\nDescription:",description, "\nID:",id,"\n")
                       }
                     ))
                     
```

Transition:
``` {r}

transition <- setRefClass("edge", fields = list(from = "vertex", to = "vertex", weight = "numeric", description ="character"),
                          methods = list(
                            show = function(){
                              cat("Edge\nDescription:",description,"\nWeight:",weight, "\nFrom:\n")
                              from$show()
                              cat("To:\n")
                              to$show()
                            })
)

```


DAG:
``` {r}
adjList <- setRefClass("adjList", fields = list(adjs = "list"),
                       methods = list(
                         addEdge = function(e){
                           if(!("edge" %in% class(e))){
                             stop("Cannot add non edge class to adjacency list")
                           }
                           vName <- paste0("v",e$from$id)
                           adjs[[vName]] <<- c(adjs[[vName]],e$to$id)
                           cat("Edge Added")
                         },
                         show = function(){
                           vNames <- names(adjs)
                           for(vN in vNames){
                            cat("Vertex:",vN,"\n")
                            cat("Adjs:",adjs[[vN]],"\n")
                           }
                         }
                       )
                       )

dag <- setRefClass("dag", fields = list( vertices = "list", edges = "list", adjList = "adjList", vertexCount = "numeric"),
                  methods = list(
                    newVertex = function(description){
                      v <- state(id = vertexCount, description = description )
                      vertexCount <<- vertexCount + 1
                      vertices <<- c(vertices,v)
                      return(v)
                    },
                    createTransition = function(from, to, weight, description){
                      
                      e <- transition(from = from, to = to, weight= weight, description = description)
                      edges <<- c(edges,e)
                      adjList$addEdge(e)
                      
                      return(e)
                    }
                  ))
```



In action
========================================================
incremental: true
```{r}
g <- dag(vertexCount = 0)

awake <- g$newVertex(description = "Awake")
awake

dressedA <- g$newVertex(description = "DressedA")
dressedA

dressedB <- g$newVertex(description = "DressedB")
dressedB

getDressedA <- g$createTransition(from = awake,to = dressedA, weight = 1, description = "Getting pretty")
getDressedA

getDressedB <- g$createTransition(from = awake,to = dressedB, weight = 0.5, description = "Getting cool")

```



